git学习笔记.txt

1.版本控制系统（VCS）
2. 
	中央式 VCS：保存版本历史、同步团队代码
	分布式 VCS：同步团队代码
	(分布式VCS也是有中央仓库的，主要用来同步团队代码。而版本控制的历史记录是在本地操作的，这也是分布式的含义)
3.stage area(暂存区)
	1.当有文件改动，比如 add 新文件等，这个改动会进入暂存区以等待提交。对应文件系统是 .git 目录中的 index 文件
4.origin/master
	1.origin 在用 clone 初始化本地仓库时，中央仓库的默认名，由 git 自动起的
	2.master origin上的分支名称
5.HEAD 指向当前分支的最新 commit。具有唯一性
6.master 也是一个分支，唯一的区别的是，新建的仓库这是一个默认的名称，clone 时自动 checkout 到 master 分支
7.所有分支之间是平等的地位，无论是 branch 还是 master，他们都是分支，地位平等
8.branch 所谓分支只是一个引用，是以字符串的形式，存储在 .git 文件中的。

9.push 就是将当前本地 brach 的 commits 提交到仓库，默认只会提交到 clone 后的分支中

10.提交分支后，在远程仓库中，HEAD 永远指向 master 主分支

11.merge:从目标 commit 和当前 commit （即 HEAD 所指向的 commit）分叉的位置起，把目标 commit 的路径上的所有 commit 的内容一并应用到当前 commit，然后自动生成一个新的 commit。
	适用场景：
		1.单独开发的 branch 用完了以后，合并回原先的 branch
		2.git pull 的内部自动操作

12.merge 冲突解决：(发生冲突后，git 会处于冲突待处理状态)
	1.直接修改文件，然后手动 commit
	2.merge 工具：TODO

13.重新解释 git pull 操作：
	两步走
		1.git fetch 下载远程仓库内容，并更新本地 origin/master(对远程仓库 master 的镜像) 与 origin/HEAD(对远程仓库  HEAD 的镜像) 镜像指向到最新的 commit
		2.git merge origin/HEAD 合并远程仓库 HEAD 所指向的 commit，也就是 origin/HEAD。然后本地 HEAD 带着 master 移动到最新的 commit 处

14.rebase 改变基点。NOTE：不要对主进行变基，否则会无法 push
   1.可以清理 commit 分支，不会像 merge 一样保留分支
   2.可用于从主更新最新变更到当前分支，也就是把当前分支重新 rebase 到主最新的 commit 上

15.git commit --amend 对最新一条 commit 进行修正，不会产生新的 commit。注意：背后实现为生成一条新的 commit，替换掉当前 commit

16.
	rebase -i 交互式 rebase 。(-i --interactive的缩写)。可以对曾经的一系列 commit 进行编辑、合并、删除等操作
	git 中两个符号
		1.^  -> HEAD^^ 表示从当前 commit 往回数 1 个。有几个 ^ 就从当前(包含当前)往回数几个
		2.~  -> HEAD~2 同上
		NOTE:和 reset、revert 不一样。reset、revert 中，HEAD 就表示第一个
	rebase 编辑界面中几个参数
		1.pick 			-> 使用此 commit
		2.reword		-> 使用此 commit，但是编辑其 commit 信息
		3.edit			-> 使用此 commit，但是暂停，先进行 amending 修改
		4.squash		-> 使用此 commit，但是将其合并到之前的 commit 中
		5.fixup			-> 和 squash 差不多，但会忽略此 commit 的提交信息
		6.break			-> 先暂停，之后在通过 git rebase --continue 恢复
		7.drop			-> 删除此条 commit(或直接删除该行)
		8.其他
17.reset 移动 HEAD 以及它所指向的 branch(它是用来重置 HEAD 以及它所指向的 branch 的位置的)
	1.mixed(默认) 		-> 移动 HEAD 与 branch指针，但工作目录不变。暂存区会被清空
	2.soft				-> 移动 HEAD 与 branch指针，但工作目录不变。暂存区为：重置 HEAD 所带来的新的差异
	3.hard				-> 重置 HEAD、缓存区、工作目录到当前 commit
	4.merge				-> 同上
	5.其他
18.revert 反转某一次 commit 中的内容，并生成一个新的 commit

19.checkout 签出指定的 commit.参数后可以跟分支名、commitID，并支持通配符
	在修改暂存区文件后，也可以使用 checkout --文件名 的方式，将工作区指定文件恢复成和暂存区一样

20.checkout 与 reset 比较：
	1.相同：都可以切换 HEAD 的位置
	2.不同：reset 移动 HEAD 会带着 branch 一起移动。而 checkout 不会。(使用 checkout 移动时，HEAD 会和 branch 分开)
21.stash 临时存放当前工作目录的改动
22.reflog  (不再被引用直接或间接指向的 commits 会在一定时间后被 Git 回收，所以删除找回操作一定要及时)
	当误删分支后，可以
	1.git reflog
	2.git checkout commitID
	3.git checkout -b 分支名 			-> 误删的分支即可找回

================================ command

1. git clone http://xxxx dirName        -> 克隆项目到本地，并定义目录名。默认克隆 master
	git clone -b 指定分支 远程仓库url		-> 克隆指定分支到本地
2. 
	1.git log     						-> 看着提交记录，按 q 退出
	2.git log -p 						-> 查看每一条记录更详细的修改内容(-p 是 -patch 的缩写)
	3.git log --stat 					-> 查看简要统计
	4.git show commitID 				-> 查看某一 commit 的具体信息。后面也可以在跟文件名
	5.git log --oneline 				-> 当前分支的 commit 用一行显示
3. git status  							-> 查看当前版本状态
4. git add     							-> 添加改动(改动文件会进入暂存区)
   git add .							-> 快捷添加当前目录中所有改动
5. git commit  							-> 提交改动到本地版本控制
6. git pull								-> 从中央仓库拉取到本地(内部实现两个指令，fetch(拉取) 和 merge(合并))
	git pull --rebase 					-> pull时，使用 rebase 替代 merge
7. git branch 分支名						-> 从当前 commit 处创建分支
8. 
	git checkout 分支名					-> 切换分支，HEAD 会自动指向新分支
	git checkout -b 分支名				-> 合并 7 和 8，创建分支并自动切换过去
9.git branch -d 分支名					-> 删除分支
	1.HEAD 指向的 branch 不能删除，需要先 checkout
	2.删除的只是 branch 这个引用，实际的 commit 不会被删除
	3.未合并到 master 的分支不能删除。如果确认删除，则使用 -D 强制删除(-d 改成 -D)
10. 
	git push 							-> 推送到 clone 时的默认分支
	git push origin 本地分支名			-> 推送本地分支到仓库，其分支名称必须相同
	git push origin 分支名 -f 			-> 强制 push，并覆盖远程仓库
	git push origin -d 分支名				-> 删除远程仓库分支
11.git merge 目标分支名					-> 合并分支，生成新的 commit ，本地 HEAD 会跟随过去
12.
	git merge --abort					-> 处于冲突时，放弃本次合并
	git merge --no-ff 分支名				->(no-fast-forward)不使用fast-forward方式合并，保留分支的commit历史
13.
	1.git diff --staged|--cached 		-> 比对暂存区和上一条提交（如果你立即输入 git commit，你将会提交什么）
	2.git diff HEAD|commitID 			-> 比对工作目录和上一条提交(untracked files不会被记录)
14.gitk									-> 图形化 commit diff 界面
15.git rebase 目标分支					-> 分支变基
	1.git checkout 需要变基的分支
	2.git rebase 目标分支(也就是需要当做 base 的分支)
	3.git checkout 目标分支
	4.git merge 需要变基的分支
16.
	git rebase commitID --continue 		-> 解决冲突并 add 后，继续变基
	git rebase --abort					-> 出现冲突，但是放弃本次 rebase
17.git commit --amend 					-> 修正最后一条 commit 的内容
	git push -f 						-> 如果最后一条 commit 已经 push 到远程仓库，则修改后 push 需要 -f 参数
18.
	git push rebase -i HEAD^^|HEAD~2 	-> 对最新两个 commit 进行一些列操作
	git push rebase --continue			-> 继续 rebase
19.git reset --hard HEAD^				-> 回退缓存区及工作目录到上一个版本(此操作，本地目录的内容会回退)
20.git reflog 分支名				        -> 默认查看 HEAD 的移动记录。可指定分支名查看
21.git checkout --detach 				-> 让 HEAD 和 branch 分开，而不移动 HEAD
	- git checkout 分支名即可 			-> 重新绑定，HEAD 回到 branch 的位置
22.
	git stash 							-> 暂存当前工作目录的修改。未 add 的文件无法暂存。
	git stash -u 						-> -u 是 --include-untracked 的缩写，将当前未 add 的文件一起暂存
	git stash pop 						-> 恢复暂存修改，删除 stash。(pop 后记得看下 list)
	git stash apply 						-> 恢复暂存修改，保留 stash。
	git stash list 						-> 查看当前暂存区
	git stash pop stash@{数字 n} 		-> 取回某次 stash 的变更
